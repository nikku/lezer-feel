# Literals { "top": "UnaryTests" }

1,
true,
false,
"FOO",
-1220.12,
.12

==>

UnaryTests(PositiveUnaryTests(
  PositiveUnaryTest(NumericLiteral),
  PositiveUnaryTest(BooleanLiteral),
  PositiveUnaryTest(BooleanLiteral),
  PositiveUnaryTest(StringLiteral),
  PositiveUnaryTest(NumericLiteral(...)),
  PositiveUnaryTest(NumericLiteral)
))


# DateTimeLiteral { "top": "UnaryTests" }

date and  time("2018-12-08T10:30:01"),
date and time(date("2017-01-01"),time("23:59:01")),
date("2017-01-01"),
time("23:59:01"),
duration("asddsa")

==>

UnaryTests(PositiveUnaryTests(
  PositiveUnaryTest(DateTimeLiteral(...)),
  PositiveUnaryTest(DateTimeLiteral(DateTimeConstructor(...),"(",PositionalParameters(
    DateTimeLiteral(...),
    DateTimeLiteral(...)
  ),")")),
  PositiveUnaryTest(DateTimeLiteral(...)),
  PositiveUnaryTest(DateTimeLiteral(...)),
  PositiveUnaryTest(DateTimeLiteral(...))
))


# DateTimeLiteral / AtLiteral { "top": "UnaryTests" }

@"2018-12-08T10:30:01",
@"23:59:01"

==>

UnaryTests(PositiveUnaryTests(
  PositiveUnaryTest(DateTimeLiteral(AtLiteral(StringLiteral))),
  PositiveUnaryTest(DateTimeLiteral(...))
))


# ? Placeholder { "top": "UnaryTests" }

? > 10,
? * 10 in [1..5]

==>

UnaryTests(PositiveUnaryTests(
  PositiveUnaryTest(Comparison("?",CompareOp,NumericLiteral)),
  PositiveUnaryTest(Comparison(ArithmeticExpression("?",ArithOp,NumericLiteral),in,PositiveUnaryTest(...)))
))


# Interval { "top": "UnaryTests" }

[ a.b.c .. e f.g ]

==>

UnaryTests(
  PositiveUnaryTests(
    PositiveUnaryTest(
      SimplePositiveUnaryTest(
        Interval("[",
          PathExpression(...),
          PathExpression(...),
        "]")
      )
    )
  )
)


# Negation { "top": "UnaryTests" }

not(a)

==>

UnaryTests(not,"(",PositiveUnaryTests(...),")")


# Wildcard { "top": "UnaryTests" }

-

==>

UnaryTests(Wildcard(...))


# Backtick escaped variables (Camunda) { "top": "UnaryTests", "dialect": "camunda" }

`foo`

==>

UnaryTests(
  PositiveUnaryTests(
    PositiveUnaryTest(
      VariableName(...)
    )
  )
)