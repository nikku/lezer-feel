@dialects { camunda }

@precedence {
  name,
  type,
  call,
  filter @left,
  path @left,
  qname @left,
  instanceOf,
  unary,
  prefix,
  exp @left,
  times @left,
  add @left,
  compare @left,
  and @left,
  or @left,
  filterExpression @left,
  then @left,
  else @left,
  paren,
  pname
}

@top Expression {
  expression0
}

@top Expressions {
  expression0 (";" expression0)*
}

expression0[@export] {
  expression
}

expression {
  textualExpression |
  boxedExpression
}

textualExpression {
  ForExpression |
  IfExpression |
  QuantifiedExpression |
  Disjunction |
  Conjunction |
  Comparison |
  ArithmeticExpression |
  InstanceOfExpression |
  PathExpression |
  FilterExpression |
  FunctionInvocation |
  literal |
  VariableName insertSemi? |
  kw<"?"> |
  SimplePositiveUnaryTest |
  ParenthesizedExpression
}

forExpressionStart[@export] {
  kw<"for">
}

ForInExpressions[@name=InExpressions] {
  commaSep1<ForInExpression>
}

ForInExpression[@name=InExpression] {
  inExpression<IterationContext>
}

forExpressionBodyStart[@export] {
  kw<"return">
}

ForExpression {
  forExpressionStart ForInExpressions forExpressionBodyStart expression
}

ifExpressionStart[@export] {
  kw<"if">
}

IfExpression {
  ifExpressionStart expression !then kw<"then"> expression !else kw<"else"> expression
}

quantifiedExpressionStart[@export] {
  (kw<"some"> | kw<"every">)
}

QuantifiedInExpressions[@name=InExpressions] {
  commaSep1<QuantifiedInExpression>
}

QuantifiedInExpression[@name=InExpression] {
  inExpression<expression>
}

QuantifiedExpression {
  quantifiedExpressionStart QuantifiedInExpressions kw<"satisfies"> expression
}

pathExpressionStart[@export] {
  "."
}

PathExpression[@dynamicPrecedence=1] {
  expression !path pathExpressionStart VariableName
}

filterExpressionStart[@export] {
  "[" !filterExpression
}

FilterExpression {
  expression !filter filterExpressionStart expression "]"
}

InstanceOfExpression {
  expression !instanceOf kw<"instance"> ckw<"of"> Type
}

ParenthesizedExpression {
  "(" expression !paren ")"
}

Disjunction {
  expression !or kw<"or"> expression
}

Conjunction[@dynamicPrecedence=-1] {
  expression !and kw<"and"> expression
}

boxedExpression {
  List |
  FunctionDefinition |
  Context
}

inExpressionSep[@export] {
  kw<"in">
}

inExpression<Expr> {
  Name inExpressionSep Expr
}

IterationContext {
  expression (".." expression)?
}

arithmeticPlusStart[@export] {
  minus | plus
}

arithmeticTimesStart[@export] {
  multi | divide
}

arithmeticExpStart[@export] {
  exp
}

arithmeticUnaryStart[@export] {
  (plus | minus)
}

ArithmeticExpression {
  expression !add arithmeticPlusStart expression |
  expression !times arithmeticTimesStart expression |
  expression !exp arithmeticExpStart expression |
  !prefix arithmeticUnaryStart expression
}

Comparison {
  expression !compare CompareOp<"=" | "!="> expression |
  expression !compare CompareOp<">" | ">=" | "<" | "<="> expression |
  expression !compare kw<"between"> expression kw<"and"> expression |
  expression !compare kw<"in"> PositiveUnaryTest |
  expression !compare kw<"in"> "(" PositiveUnaryTests ")"
}

SimplePositiveUnaryTest {
  CompareOp<">" | ">=" | "<" | "<="> endpoint |
  Interval
}

@top UnaryTests {
  Wildcard { minus } |
  PositiveUnaryTests |
  ckw<"not"> "(" PositiveUnaryTests ")"
}

PositiveUnaryTests {
  commaSep1<PositiveUnaryTest>
}

PositiveUnaryTest {
  expression
}

FunctionDefinition {
  functionDefinitionStart "(" FormalParameters ")" kw<"external">?
  FunctionBody { expression }
}

functionDefinitionStart[@export] {
  kw<"function">
}

FormalParameters {
  commaSep<FormalParameter>
}

FormalParameter {
  ParameterName (":" Type)?
}

Type {
  QualifiedName |
  SpecialType |
  ListType { ckw<"list"> !type "<" Type !type ">" } |
  ContextType { ckw<"context"> !type "<" ContextEntryTypes !type ">" } |
  FunctionType { kw<"function"> !type "<" ArgumentTypes !type ">" "->" Type }
}

ArgumentTypes {
  commaSep<ArgumentType>
}

ArgumentType {
  Type
}

ContextEntryTypes {
  commaSep1<ContextEntryType>
}

ContextEntryType {
  Name ":" Type
}

Context {
  contextStart commaSep<ContextEntry> "}"
}

contextStart[@export] {
  "{"
}

ContextEntry {
  Key ":" expression
}

Key {
  PropertyName |
  StringLiteral
}

DateTimeConstructor {
  ckw<"date"> |
  ckw<"date"> kw<"and"> ckw<"time"> |
  ckw<"time"> |
  ckw<"duration">
}

functionInvocationStart[@export] {
  (SpecialFunctionName | expression) !call
}

FunctionInvocation[@dynamicPrecedence=-1] {
  functionInvocationStart functionInvocationParameters
}

functionInvocationParameters[@export] {
  "(" (NamedParameters | PositionalParameters) ")"
}

NamedParameters[@dynamicPrecedence=-1] {
  commaSep1<NamedParameter>
}

NamedParameter {
  ParameterName ":" expression
}

ParameterName {
  Name
}

PositionalParameters {
  commaSep<expression>
}

endpoint {
  expression
}

nil[@export] {
  kw<"null">
}

literal[@isGroup=Literal, @export] {
  nil |
  simpleLiteral
}

simpleLiteral {
  NumericLiteral |
  StringLiteral |
  BooleanLiteral |
  DateTimeLiteral
}

QualifiedName {
  VariableName (!qname "." VariableName)*
}

Identifier {
  identifier | nameIdentifier
}

BacktickIdentifier {
  backtickIdentifier
}

VariableName {
  (!name Identifier ~ident)+ | BacktickIdentifier
}

AdditionalIdentifier[@name=Identifier] {
  "." | "'" |
  minus | plus |
  divide | multi |
  exp
}

Name {
  Identifier ~ident (!name (Identifier ~ident | AdditionalIdentifier))*
}

PropertyIdentifier[@name=Identifier] {
  propertyIdentifier
}

PropertyName[@name=Name] {
  PropertyIdentifier (!name (PropertyIdentifier | AdditionalIdentifier))*
}

Interval {
  ( "]" | "(" | listStart ~interval ) endpoint ".." endpoint ( ")" | "[" | "]" )
}

listStart[@export] {
  "["
}

List {
  listStart ~interval commaSep<expression> "]"
}

SpecialType {
  ckw<"days"> kw<"and"> ckw<"time"> ckw<"duration"> |
  ckw<"years"> kw<"and"> ckw<"months"> ckw<"duration"> |
  ckw<"date"> kw<"and"> ckw<"time">
}

SpecialFunctionName {
  ckw<"years"> kw<"and"> ckw<"months"> ckw<"duration">
}

DateTimeLiteral {
  DateTimeConstructor functionInvocationParameters |
  AtLiteral
}

NumericLiteral {
  (!unary minus)? number
}

@skip {} {
  AtLiteral {
    "@" StringLiteral
  }
}

StringLiteral {
  string
}

BooleanLiteral {
  @specialize<identifier, "true" | "false">
}

kw<Term> {
  @specialize[@name={Term}]<identifier, Term>
}

ckw<Term> {
  @extend[@name={Term}]<identifier, Term>
}

commaSep1<Expr> {
  Expr ("," Expr)*
}

commaSep<Expr> {
  "" | Expr ("," Expr)*
}

@context variableTracker from "./tokens.js"

@external tokens propertyIdentifiers from "./tokens.js" {
  propertyIdentifier[@export]
}

@external tokens identifiers from "./tokens.js" {
  identifier[@export],
  nameIdentifier[@export]
}

@external tokens insertSemicolon from "./tokens.js" {
  insertSemi
}

@skip { spaces | newline | LineComment | BlockComment }

@tokens {

  spaces { $[\u0009 \u000b\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]+ }

  newline { $[\r\n\u2028\u2029] }

  LineComment { "//" ![\n]* }

  BlockComment { "/*" blockCommentRest }

  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }

  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

  digit {
    $[0-9]
  }

  digits {
    digit+
  }

  string {
    '"' (![\\\n"] | "\\" _)* '"'?
  }

  number {
    (digits ("." digits)? | "." digits)
  }

  backtickIdentifier[@dialect=camunda] {
    "`" (![\\\n`] | "\\" _)* "`"
  }

  @precedence { BlockComment, LineComment, divide }

  @precedence {
    number,
    "."
  }

  ">" "<" ">=" "<="

  "(" ")" "[" "]" "{" "}"

  minus[@name=ArithOp] {
    "-"
  }

  plus[@name=ArithOp] {
    "+"
  }

  divide[@name=ArithOp] {
    "/"
  }

  exp[@name=ArithOp] {
    "**" | "^"
  }

  multi[@name=ArithOp] {
    "*"
  }

  @precedence {
    exp,
    multi
  }

  CompareOp<Expr> {
    Expr
  }

}

@detectDelim

@external propSource feelHighlighting from "./highlight.js"